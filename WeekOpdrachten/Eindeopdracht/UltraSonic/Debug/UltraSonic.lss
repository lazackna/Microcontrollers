
UltraSonic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000200  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ce4  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d1  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005da  00000000  00000000  000019a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00001f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000502  00000000  00000000  00002074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d9  00000000  00000000  00002576  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000284f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	65 c0       	rjmp	.+202    	; 0x104 <__vector_14>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	53 d0       	rcall	.+166    	; 0x150 <main>
  aa:	6e c0       	rjmp	.+220    	; 0x188 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <lcd_en>:

	// Second nibble
	PORTC = (byte<<4);
	PORTC |= (1<<LCD_RS);
	lcd_en();
}
  ae:	85 b3       	in	r24, 0x15	; 21
  b0:	88 60       	ori	r24, 0x08	; 8
  b2:	85 bb       	out	0x15, r24	; 21
  b4:	8f ec       	ldi	r24, 0xCF	; 207
  b6:	97 e0       	ldi	r25, 0x07	; 7
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_en+0xa>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <lcd_en+0x10>
  be:	00 00       	nop
  c0:	85 b3       	in	r24, 0x15	; 21
  c2:	87 7f       	andi	r24, 0xF7	; 247
  c4:	85 bb       	out	0x15, r24	; 21
  c6:	8f ec       	ldi	r24, 0xCF	; 207
  c8:	97 e0       	ldi	r25, 0x07	; 7
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_en+0x1c>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcd_en+0x22>
  d0:	00 00       	nop
  d2:	08 95       	ret

000000d4 <init_4bits_mode>:

void init_4bits_mode(void) {
  d4:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  da:	15 ba       	out	0x15, r1	; 21

	// Step 2 (table 12)
	PORTC = 0x20;	// Set lcd to 4-bit mode.
  dc:	c0 e2       	ldi	r28, 0x20	; 32
  de:	c5 bb       	out	0x15, r28	; 21
	lcd_en();
  e0:	e6 df       	rcall	.-52     	; 0xae <lcd_en>

	// Step 3 (table 12)
	PORTC = 0x20;  
	lcd_en();
  e2:	c5 bb       	out	0x15, r28	; 21
  e4:	e4 df       	rcall	.-56     	; 0xae <lcd_en>
	PORTC = 0x80; // Set to 2 lines.
  e6:	80 e8       	ldi	r24, 0x80	; 128
	lcd_en();
  e8:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   
  ea:	e1 df       	rcall	.-62     	; 0xae <lcd_en>
	lcd_en();
  ec:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0; // Lcd, blink and cursor on.
  ee:	df df       	rcall	.-66     	; 0xae <lcd_en>
	lcd_en();
  f0:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;  
  f2:	85 bb       	out	0x15, r24	; 21
	lcd_en();
  f4:	dc df       	rcall	.-72     	; 0xae <lcd_en>
  f6:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x60; // Increase cursor position.
  f8:	da df       	rcall	.-76     	; 0xae <lcd_en>
  fa:	80 e6       	ldi	r24, 0x60	; 96
	lcd_en();
  fc:	85 bb       	out	0x15, r24	; 21
  fe:	d7 df       	rcall	.-82     	; 0xae <lcd_en>

}
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <__vector_14>:
#define  Trigger_pin	PA0

int TimerOverflow = 0;

ISR(TIMER1_OVF_vect)
{
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
	TimerOverflow++;
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 116:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <wait>:

char * text;

void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	08 c0       	rjmp	.+16     	; 0x148 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	ef ec       	ldi	r30, 0xCF	; 207
 13a:	f7 e0       	ldi	r31, 0x07	; 7
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <wait+0xa>
 140:	00 c0       	rjmp	.+0      	; 0x142 <wait+0x10>
 142:	00 00       	nop
 144:	2f 5f       	subi	r18, 0xFF	; 255
 146:	3f 4f       	sbci	r19, 0xFF	; 255
 148:	28 17       	cp	r18, r24
 14a:	39 07       	cpc	r19, r25
 14c:	ac f3       	brlt	.-22     	; 0x138 <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 14e:	08 95       	ret

00000150 <main>:
int main(void)
{
	char string[10];
	long count;
	double distance;
	DDRA = 0x01;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	8a bb       	out	0x1a, r24	; 26
	PORTD = 0xFF;
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	82 bb       	out	0x12, r24	; 18
	DDRB = 0xFF;
 158:	87 bb       	out	0x17, r24	; 23
	// We use timer 1.
	// To read high we set TCCR1B to rising edge.
	// Clear the Input Capture Flag (ICP).
	// This says if an interupt happened.
	init_4bits_mode();
 15a:	bc df       	rcall	.-136    	; 0xd4 <init_4bits_mode>
	sei();
 15c:	78 94       	sei
	TIMSK = (1 << TOIE1); // enable the timer1 overflow interrupt. 
 15e:	84 e0       	ldi	r24, 0x04	; 4
 160:	87 bf       	out	0x37, r24	; 55
	TCCR1A = 0;
 162:	1f bc       	out	0x2f, r1	; 47
	PORTB = 0;
 164:	18 ba       	out	0x18, r1	; 24
	PORTA |= (1 << Trigger_pin);
 166:	8b b3       	in	r24, 0x1b	; 27
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	8b bb       	out	0x1b, r24	; 27
	wait(1);
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	e0 df       	rcall	.-64     	; 0x132 <wait>
	PORTA &= (~(1 << Trigger_pin));
 172:	8b b3       	in	r24, 0x1b	; 27
 174:	8e 7f       	andi	r24, 0xFE	; 254
 176:	8b bb       	out	0x1b, r24	; 27
	
	while ((TIFR & (1 << ICF1)) == 0);
 178:	06 b6       	in	r0, 0x36	; 54
 17a:	05 fe       	sbrs	r0, 5
 17c:	fd cf       	rjmp	.-6      	; 0x178 <main+0x28>
	
	PORTC = 0xFF;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	85 bb       	out	0x15, r24	; 21
		//lcd_write_string("Dest");
		//
		//wait(200);
	//}
	
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	08 95       	ret

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
