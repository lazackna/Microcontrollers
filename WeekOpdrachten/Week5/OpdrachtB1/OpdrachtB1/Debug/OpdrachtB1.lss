
OpdrachtB1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d4f  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ce  00000000  00000000  000010e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000052b  00000000  00000000  000019b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  00001edc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000506  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000025d  00000000  00000000  000024de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000273b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	9b d0       	rcall	.+310    	; 0x1d0 <main>
  9a:	dd c0       	rjmp	.+442    	; 0x256 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
void displayOff() 
{
  	spi_slaveSelect(0);				// Select display chip
  	spi_write(0x0C); 				// Register 0B: Shutdown register
  	spi_write(0x00); 				// 	-> 1 = Normal operation
  	spi_slaveDeSelect(0);			// Deselect display chip
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	08 c0       	rjmp	.+16     	; 0xb4 <wait+0x16>
  a4:	ef ec       	ldi	r30, 0xCF	; 207
  a6:	f7 e0       	ldi	r31, 0x07	; 7
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <wait+0xa>
  ac:	00 c0       	rjmp	.+0      	; 0xae <wait+0x10>
  ae:	00 00       	nop
  b0:	2f 5f       	subi	r18, 0xFF	; 255
  b2:	3f 4f       	sbci	r19, 0xFF	; 255
  b4:	28 17       	cp	r18, r24
  b6:	39 07       	cpc	r19, r25
  b8:	ac f3       	brlt	.-22     	; 0xa4 <wait+0x6>
  ba:	08 95       	ret

000000bc <spi_masterInit>:
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 bb       	out	0x17, r24	; 23
  c0:	87 b3       	in	r24, 0x17	; 23
  c2:	87 7f       	andi	r24, 0xF7	; 247
  c4:	87 bb       	out	0x17, r24	; 23
  c6:	88 b3       	in	r24, 0x18	; 24
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	88 bb       	out	0x18, r24	; 24
  cc:	82 e5       	ldi	r24, 0x52	; 82
  ce:	8d b9       	out	0x0d, r24	; 13
  d0:	08 95       	ret

000000d2 <spi_write>:
  d2:	8f b9       	out	0x0f, r24	; 15
  d4:	77 9b       	sbis	0x0e, 7	; 14
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <spi_write+0x2>
  d8:	08 95       	ret

000000da <spi_slaveSelect>:
  da:	98 b3       	in	r25, 0x18	; 24
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <spi_slaveSelect+0xc>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	8a 95       	dec	r24
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <spi_slaveSelect+0x8>
  ea:	20 95       	com	r18
  ec:	29 23       	and	r18, r25
  ee:	28 bb       	out	0x18, r18	; 24
  f0:	08 95       	ret

000000f2 <spi_slaveDeSelect>:
  f2:	98 b3       	in	r25, 0x18	; 24
  f4:	21 e0       	ldi	r18, 0x01	; 1
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <spi_slaveDeSelect+0xc>
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	8a 95       	dec	r24
 100:	e2 f7       	brpl	.-8      	; 0xfa <spi_slaveDeSelect+0x8>
 102:	29 2b       	or	r18, r25
 104:	28 bb       	out	0x18, r18	; 24
 106:	08 95       	ret

00000108 <displayDriverInit>:
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	e7 df       	rcall	.-50     	; 0xda <spi_slaveSelect>
 10c:	89 e0       	ldi	r24, 0x09	; 9
 10e:	e1 df       	rcall	.-62     	; 0xd2 <spi_write>
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	df df       	rcall	.-66     	; 0xd2 <spi_write>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	ed df       	rcall	.-38     	; 0xf2 <spi_slaveDeSelect>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	df df       	rcall	.-66     	; 0xda <spi_slaveSelect>
 11c:	8a e0       	ldi	r24, 0x0A	; 10
 11e:	d9 df       	rcall	.-78     	; 0xd2 <spi_write>
 120:	8f e0       	ldi	r24, 0x0F	; 15
 122:	d7 df       	rcall	.-82     	; 0xd2 <spi_write>
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	e5 df       	rcall	.-54     	; 0xf2 <spi_slaveDeSelect>
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	d7 df       	rcall	.-82     	; 0xda <spi_slaveSelect>
 12c:	8b e0       	ldi	r24, 0x0B	; 11
 12e:	d1 df       	rcall	.-94     	; 0xd2 <spi_write>
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	cf df       	rcall	.-98     	; 0xd2 <spi_write>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	dd df       	rcall	.-70     	; 0xf2 <spi_slaveDeSelect>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	cf df       	rcall	.-98     	; 0xda <spi_slaveSelect>
 13c:	8c e0       	ldi	r24, 0x0C	; 12
 13e:	c9 df       	rcall	.-110    	; 0xd2 <spi_write>
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	c7 df       	rcall	.-114    	; 0xd2 <spi_write>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	d5 cf       	rjmp	.-86     	; 0xf2 <spi_slaveDeSelect>
 148:	08 95       	ret

0000014a <spi_writeWord>:
}

// Write a word = address byte + data byte from master to slave
void spi_writeWord(unsigned char adress, unsigned char data) {
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	d8 2f       	mov	r29, r24
 150:	c6 2f       	mov	r28, r22
	spi_slaveSelect(0);
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	c2 df       	rcall	.-124    	; 0xda <spi_slaveSelect>
	spi_write(adress);
 156:	8d 2f       	mov	r24, r29
 158:	bc df       	rcall	.-136    	; 0xd2 <spi_write>
	spi_write(data);
 15a:	8c 2f       	mov	r24, r28
 15c:	ba df       	rcall	.-140    	; 0xd2 <spi_write>
	spi_slaveDeSelect(0);
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	c8 df       	rcall	.-112    	; 0xf2 <spi_slaveDeSelect>
 162:	df 91       	pop	r29
}
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <writeLedDisplay>:
 168:	0f 93       	push	r16

void writeLedDisplay(int value) {
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
	if(value < 0) {
 170:	99 23       	and	r25, r25
 172:	24 f5       	brge	.+72     	; 0x1bc <writeLedDisplay+0x54>
		value = -value;
 174:	91 95       	neg	r25
 176:	81 95       	neg	r24
 178:	91 09       	sbc	r25, r1
		
		for(int i = 1; i <= 3; i++) {
 17a:	c1 e0       	ldi	r28, 0x01	; 1
 17c:	d0 e0       	ldi	r29, 0x00	; 0
 17e:	0b c0       	rjmp	.+22     	; 0x196 <writeLedDisplay+0x2e>
			spi_writeWord(i, value % 10);
 180:	6a e0       	ldi	r22, 0x0A	; 10
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	41 d0       	rcall	.+130    	; 0x208 <__divmodhi4>
 186:	06 2f       	mov	r16, r22
 188:	17 2f       	mov	r17, r23
 18a:	68 2f       	mov	r22, r24
 18c:	8c 2f       	mov	r24, r28
 18e:	dd df       	rcall	.-70     	; 0x14a <spi_writeWord>
			value /= 10;
 190:	80 2f       	mov	r24, r16
 192:	91 2f       	mov	r25, r17

void writeLedDisplay(int value) {
	if(value < 0) {
		value = -value;
		
		for(int i = 1; i <= 3; i++) {
 194:	21 96       	adiw	r28, 0x01	; 1
 196:	c4 30       	cpi	r28, 0x04	; 4
 198:	d1 05       	cpc	r29, r1
 19a:	94 f3       	brlt	.-28     	; 0x180 <writeLedDisplay+0x18>
			spi_writeWord(i, value % 10);
			value /= 10;
		}
		spi_writeWord(4, 10);
 19c:	6a e0       	ldi	r22, 0x0A	; 10
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	d4 df       	rcall	.-88     	; 0x14a <spi_writeWord>
 1a2:	11 c0       	rjmp	.+34     	; 0x1c6 <writeLedDisplay+0x5e>
	} else {
	
		for(int i = 1; i <= 4; i++) {
			spi_writeWord(i, value % 10);
 1a4:	6a e0       	ldi	r22, 0x0A	; 10
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	2f d0       	rcall	.+94     	; 0x208 <__divmodhi4>
 1aa:	06 2f       	mov	r16, r22
 1ac:	17 2f       	mov	r17, r23
 1ae:	68 2f       	mov	r22, r24
 1b0:	8c 2f       	mov	r24, r28
 1b2:	cb df       	rcall	.-106    	; 0x14a <spi_writeWord>
 1b4:	80 2f       	mov	r24, r16
			value /= 10;
 1b6:	91 2f       	mov	r25, r17
 1b8:	21 96       	adiw	r28, 0x01	; 1
			value /= 10;
		}
		spi_writeWord(4, 10);
	} else {
	
		for(int i = 1; i <= 4; i++) {
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <writeLedDisplay+0x58>
 1bc:	c1 e0       	ldi	r28, 0x01	; 1
 1be:	d0 e0       	ldi	r29, 0x00	; 0
 1c0:	c5 30       	cpi	r28, 0x05	; 5
 1c2:	d1 05       	cpc	r29, r1
 1c4:	7c f3       	brlt	.-34     	; 0x1a4 <writeLedDisplay+0x3c>
 1c6:	df 91       	pop	r29
			spi_writeWord(i, value % 10);
			value /= 10;
		}
	}
}
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	08 95       	ret

000001d0 <main>:
 1d0:	cf 93       	push	r28

int main()
{
	// inilialize
	DDRB=0x01;					  	// Set PB0 pin as output for display select
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	87 bb       	out	0x17, r24	; 23
	spi_masterInit();              	// Initialize spi module
 1d6:	72 df       	rcall	.-284    	; 0xbc <spi_masterInit>
	displayDriverInit();            // Initialize display chip
 1d8:	97 df       	rcall	.-210    	; 0x108 <displayDriverInit>
 1da:	c1 e0       	ldi	r28, 0x01	; 1

 	// clear display (all zero's)
	for (char i =1; i<=4; i++)
 1dc:	09 c0       	rjmp	.+18     	; 0x1f0 <main+0x20>
	{
      	spi_slaveSelect(0); 		// Select display chip
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	7c df       	rcall	.-264    	; 0xda <spi_slaveSelect>
      	spi_write(i);  				// 	digit adress: (digit place)
 1e2:	8c 2f       	mov	r24, r28
 1e4:	76 df       	rcall	.-276    	; 0xd2 <spi_write>
      	spi_write(0);				// 	digit value: 0 
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	74 df       	rcall	.-280    	; 0xd2 <spi_write>
 1ea:	80 e0       	ldi	r24, 0x00	; 0
  	  	spi_slaveDeSelect(0);		// Deselect display chip
 1ec:	82 df       	rcall	.-252    	; 0xf2 <spi_slaveDeSelect>
 1ee:	cf 5f       	subi	r28, 0xFF	; 255
	DDRB=0x01;					  	// Set PB0 pin as output for display select
	spi_masterInit();              	// Initialize spi module
	displayDriverInit();            // Initialize display chip

 	// clear display (all zero's)
	for (char i =1; i<=4; i++)
 1f0:	c5 30       	cpi	r28, 0x05	; 5
 1f2:	a8 f3       	brcs	.-22     	; 0x1de <main+0xe>
      	spi_slaveSelect(0); 		// Select display chip
      	spi_write(i);  				// 	digit adress: (digit place)
      	spi_write(0);				// 	digit value: 0 
  	  	spi_slaveDeSelect(0);		// Deselect display chip
	}    
	wait(1000);
 1f4:	88 ee       	ldi	r24, 0xE8	; 232
 1f6:	93 e0       	ldi	r25, 0x03	; 3
 1f8:	52 df       	rcall	.-348    	; 0x9e <wait>
 1fa:	80 e1       	ldi	r24, 0x10	; 16
	//wait(1000);
	//for(int i = 0; i > -999; i--) {
		//writeLedDisplay(i);
		//wait(100);
	//}
	writeLedDisplay(16);
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	b4 df       	rcall	.-152    	; 0x168 <writeLedDisplay>
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0

  	return (1);
}
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <__divmodhi4>:
 208:	97 fb       	bst	r25, 7
 20a:	07 2e       	mov	r0, r23
 20c:	16 f4       	brtc	.+4      	; 0x212 <__divmodhi4+0xa>
 20e:	00 94       	com	r0
 210:	06 d0       	rcall	.+12     	; 0x21e <__divmodhi4_neg1>
 212:	77 fd       	sbrc	r23, 7
 214:	08 d0       	rcall	.+16     	; 0x226 <__divmodhi4_neg2>
 216:	0b d0       	rcall	.+22     	; 0x22e <__udivmodhi4>
 218:	07 fc       	sbrc	r0, 7
 21a:	05 d0       	rcall	.+10     	; 0x226 <__divmodhi4_neg2>
 21c:	3e f4       	brtc	.+14     	; 0x22c <__divmodhi4_exit>

0000021e <__divmodhi4_neg1>:
 21e:	90 95       	com	r25
 220:	81 95       	neg	r24
 222:	9f 4f       	sbci	r25, 0xFF	; 255
 224:	08 95       	ret

00000226 <__divmodhi4_neg2>:
 226:	70 95       	com	r23
 228:	61 95       	neg	r22
 22a:	7f 4f       	sbci	r23, 0xFF	; 255

0000022c <__divmodhi4_exit>:
 22c:	08 95       	ret

0000022e <__udivmodhi4>:
 22e:	aa 1b       	sub	r26, r26
 230:	bb 1b       	sub	r27, r27
 232:	51 e1       	ldi	r21, 0x11	; 17
 234:	07 c0       	rjmp	.+14     	; 0x244 <__udivmodhi4_ep>

00000236 <__udivmodhi4_loop>:
 236:	aa 1f       	adc	r26, r26
 238:	bb 1f       	adc	r27, r27
 23a:	a6 17       	cp	r26, r22
 23c:	b7 07       	cpc	r27, r23
 23e:	10 f0       	brcs	.+4      	; 0x244 <__udivmodhi4_ep>
 240:	a6 1b       	sub	r26, r22
 242:	b7 0b       	sbc	r27, r23

00000244 <__udivmodhi4_ep>:
 244:	88 1f       	adc	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	5a 95       	dec	r21
 24a:	a9 f7       	brne	.-22     	; 0x236 <__udivmodhi4_loop>
 24c:	80 95       	com	r24
 24e:	90 95       	com	r25
 250:	bc 01       	movw	r22, r24
 252:	cd 01       	movw	r24, r26
 254:	08 95       	ret

00000256 <_exit>:
 256:	f8 94       	cli

00000258 <__stop_program>:
 258:	ff cf       	rjmp	.-2      	; 0x258 <__stop_program>
