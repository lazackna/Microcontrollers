
OpdrachtB5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000232  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  00800100  00800100  00000232  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000261  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c28  00000000  00000000  00000291  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000899  00000000  00000000  00000eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000347  00000000  00000000  00001752  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027d  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d6  00000000  00000000  00001d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001e33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001ba  000001ba  0000022e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.wait    0000001e  0000019c  0000019c  00000210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.createSignals 00000080  000000ea  000000ea  0000015e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000032  0000016a  0000016a  000001de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
   8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
   c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  10:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  14:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  18:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  1c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  20:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  24:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  28:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  2c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  30:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  34:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  38:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  3c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  44:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  4c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  58:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  5c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  60:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  64:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  68:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  6c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  70:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  74:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  7c:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  80:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  84:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>
  88:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 30       	cpi	r16, 0x01	; 1
  90:	80 00       	.word	0x0080	; ????

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d0 e1       	ldi	r29, 0x10	; 16
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	19 c0       	rjmp	.+50     	; 0xd8 <__do_clear_bss+0x8>
  a6:	b7 91       	elpm	r27, Z+
  a8:	a7 91       	elpm	r26, Z+
  aa:	37 91       	elpm	r19, Z+
  ac:	27 91       	elpm	r18, Z+
  ae:	07 91       	elpm	r16, Z+
  b0:	07 fd       	sbrc	r16, 7
  b2:	0e c0       	rjmp	.+28     	; 0xd0 <__do_clear_bss>
  b4:	97 91       	elpm	r25, Z+
  b6:	87 91       	elpm	r24, Z+
  b8:	ef 01       	movw	r28, r30
  ba:	f9 2f       	mov	r31, r25
  bc:	e8 2f       	mov	r30, r24
  be:	0b bf       	out	0x3b, r16	; 59
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x22>
  ca:	fe 01       	movw	r30, r28
  cc:	1b be       	out	0x3b, r1	; 59
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <__do_clear_bss+0x8>

000000d0 <__do_clear_bss>:
  d0:	1d 92       	st	X+, r1
  d2:	a2 17       	cp	r26, r18
  d4:	b3 07       	cpc	r27, r19
  d6:	e1 f7       	brne	.-8      	; 0xd0 <__do_clear_bss>
  d8:	e1 39       	cpi	r30, 0x91	; 145
  da:	f4 07       	cpc	r31, r20
  dc:	21 f7       	brne	.-56     	; 0xa6 <__do_copy_data+0x8>
  de:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  e2:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>

Disassembly of section .text:

000001ba <__bad_interrupt>:
 1ba:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

0000019c <wait>:

#define n 16

void wait (int ms)
{
	for (int i = 0; i < ms; i++)
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	08 c0       	rjmp	.+16     	; 0x1b2 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	ef ec       	ldi	r30, 0xCF	; 207
 1a4:	f7 e0       	ldi	r31, 0x07	; 7
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <wait+0xa>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <wait+0x10>
 1ac:	00 00       	nop
 1ae:	2f 5f       	subi	r18, 0xFF	; 255
 1b0:	3f 4f       	sbci	r19, 0xFF	; 255
 1b2:	28 17       	cp	r18, r24
 1b4:	39 07       	cpc	r19, r25
 1b6:	ac f3       	brlt	.-22     	; 0x1a2 <wait+0x6>
	{
		_delay_ms(1);
	}
}
 1b8:	08 95       	ret

Disassembly of section .text.createSignals:

000000ea <createSignals>:
	}
}

void createSignals() {
	int pin = 0x1;
	signals[0].pin = pin;
  ea:	e0 e0       	ldi	r30, 0x00	; 0
  ec:	f1 e0       	ldi	r31, 0x01	; 1
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	80 83       	st	Z, r24
	signals[0].delay = 50;
  f2:	82 e3       	ldi	r24, 0x32	; 50
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	92 83       	std	Z+2, r25	; 0x02
  f8:	81 83       	std	Z+1, r24	; 0x01
	for (int i = 1; i < 8; i++) {
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
}

void createSignals() {
	int pin = 0x1;
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
	signals[0].pin = pin;
	signals[0].delay = 50;
	for (int i = 1; i < 8; i++) {
 102:	0f c0       	rjmp	.+30     	; 0x122 <createSignals+0x38>
		signals[i].delay = 50;
 104:	fc 01       	movw	r30, r24
 106:	ee 0f       	add	r30, r30
 108:	ff 1f       	adc	r31, r31
 10a:	e8 0f       	add	r30, r24
 10c:	f9 1f       	adc	r31, r25
 10e:	e0 50       	subi	r30, 0x00	; 0
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	42 e3       	ldi	r20, 0x32	; 50
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	52 83       	std	Z+2, r21	; 0x02
 118:	41 83       	std	Z+1, r20	; 0x01
		pin = pin << 1;
 11a:	22 0f       	add	r18, r18
 11c:	33 1f       	adc	r19, r19
		signals[i].pin = pin;
 11e:	20 83       	st	Z, r18

void createSignals() {
	int pin = 0x1;
	signals[0].pin = pin;
	signals[0].delay = 50;
	for (int i = 1; i < 8; i++) {
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	88 30       	cpi	r24, 0x08	; 8
 124:	91 05       	cpc	r25, r1
 126:	74 f3       	brlt	.-36     	; 0x104 <createSignals+0x1a>
 128:	89 e0       	ldi	r24, 0x09	; 9
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	1a c0       	rjmp	.+52     	; 0x162 <createSignals+0x78>
		signals[i].pin = pin;
	}
	
	for (int i = 9; i < 12; i = i + 2)
	{
		signals[i].delay = 100;
 12e:	fc 01       	movw	r30, r24
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e8 0f       	add	r30, r24
 136:	f9 1f       	adc	r31, r25
 138:	e0 50       	subi	r30, 0x00	; 0
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	24 e6       	ldi	r18, 0x64	; 100
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	32 83       	std	Z+2, r19	; 0x02
 142:	21 83       	std	Z+1, r18	; 0x01
		signals[i].pin = 0xff;
 144:	4f ef       	ldi	r20, 0xFF	; 255
 146:	40 83       	st	Z, r20
		signals[i + 1].delay = 100;
 148:	fc 01       	movw	r30, r24
 14a:	31 96       	adiw	r30, 0x01	; 1
 14c:	af 01       	movw	r20, r30
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	e4 0f       	add	r30, r20
 154:	f5 1f       	adc	r31, r21
 156:	e0 50       	subi	r30, 0x00	; 0
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	32 83       	std	Z+2, r19	; 0x02
 15c:	21 83       	std	Z+1, r18	; 0x01
		signals[i + 1].pin = 0x0;
 15e:	10 82       	st	Z, r1
		signals[i].delay = 50;
		pin = pin << 1;
		signals[i].pin = pin;
	}
	
	for (int i = 9; i < 12; i = i + 2)
 160:	02 96       	adiw	r24, 0x02	; 2
 162:	8c 30       	cpi	r24, 0x0C	; 12
 164:	91 05       	cpc	r25, r1
 166:	1c f3       	brlt	.-58     	; 0x12e <createSignals+0x44>
		signals[i + 1].pin = 0x0;
	}
	
	
	
}
 168:	08 95       	ret

Disassembly of section .text.main:

0000016a <main>:
void createSignals();

int main(void)
{	
	
	DDRD = 0xff;
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	81 bb       	out	0x11, r24	; 17
	
	createSignals();
 16e:	0e 94 75 00 	call	0xea	; 0xea <__data_load_end>
	int arraySize = sizeof(signals)/sizeof(signals[0]);
	while(1)
	{
		for (int i = 0; i < arraySize; i++)
 172:	c0 e0       	ldi	r28, 0x00	; 0
 174:	d0 e0       	ldi	r29, 0x00	; 0
 176:	0e c0       	rjmp	.+28     	; 0x194 <main+0x2a>
		{
			PORTD = signals[i].pin;
 178:	fe 01       	movw	r30, r28
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	ec 0f       	add	r30, r28
 180:	fd 1f       	adc	r31, r29
 182:	e0 50       	subi	r30, 0x00	; 0
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	80 81       	ld	r24, Z
 188:	82 bb       	out	0x12, r24	; 18
			wait(signals[i].delay);
 18a:	81 81       	ldd	r24, Z+1	; 0x01
 18c:	92 81       	ldd	r25, Z+2	; 0x02
 18e:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	
	createSignals();
	int arraySize = sizeof(signals)/sizeof(signals[0]);
	while(1)
	{
		for (int i = 0; i < arraySize; i++)
 192:	21 96       	adiw	r28, 0x01	; 1
 194:	c0 31       	cpi	r28, 0x10	; 16
 196:	d1 05       	cpc	r29, r1
 198:	7c f3       	brlt	.-34     	; 0x178 <main+0xe>
 19a:	eb cf       	rjmp	.-42     	; 0x172 <main+0x8>
