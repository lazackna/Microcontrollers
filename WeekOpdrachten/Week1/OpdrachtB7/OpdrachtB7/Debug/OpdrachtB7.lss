
OpdrachtB7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000266  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800100  00800100  00000266  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000295  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c63  00000000  00000000  000002cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000089f  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000388  00000000  00000000  000017cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001b58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027d  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016e  00000000  00000000  00001e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001ee  000001ee  00000262  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.wait    0000001e  000001d0  000001d0  00000244  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.setCharliePlexingLed 0000005c  000000ea  000000ea  0000015e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.createSignals 00000056  00000146  00000146  000001ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    00000034  0000019c  0000019c  00000210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
   8:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
   c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  10:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  14:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  18:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  1c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  20:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  24:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  28:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  2c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  30:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  34:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  38:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  3c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  40:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  44:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  48:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  4c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  50:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  54:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  58:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  5c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  60:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  64:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  68:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  6c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  70:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  74:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  78:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  7c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  80:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  84:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  88:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 24       	eor	r0, r1
  90:	80 00       	.word	0x0080	; ????

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d0 e1       	ldi	r29, 0x10	; 16
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	19 c0       	rjmp	.+50     	; 0xd8 <__do_clear_bss+0x8>
  a6:	b7 91       	elpm	r27, Z+
  a8:	a7 91       	elpm	r26, Z+
  aa:	37 91       	elpm	r19, Z+
  ac:	27 91       	elpm	r18, Z+
  ae:	07 91       	elpm	r16, Z+
  b0:	07 fd       	sbrc	r16, 7
  b2:	0e c0       	rjmp	.+28     	; 0xd0 <__do_clear_bss>
  b4:	97 91       	elpm	r25, Z+
  b6:	87 91       	elpm	r24, Z+
  b8:	ef 01       	movw	r28, r30
  ba:	f9 2f       	mov	r31, r25
  bc:	e8 2f       	mov	r30, r24
  be:	0b bf       	out	0x3b, r16	; 59
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x22>
  ca:	fe 01       	movw	r30, r28
  cc:	1b be       	out	0x3b, r1	; 59
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <__do_clear_bss+0x8>

000000d0 <__do_clear_bss>:
  d0:	1d 92       	st	X+, r1
  d2:	a2 17       	cp	r26, r18
  d4:	b3 07       	cpc	r27, r19
  d6:	e1 f7       	brne	.-8      	; 0xd0 <__do_clear_bss>
  d8:	e1 39       	cpi	r30, 0x91	; 145
  da:	f4 07       	cpc	r31, r20
  dc:	21 f7       	brne	.-56     	; 0xa6 <__do_copy_data+0x8>
  de:	0e 94 ce 00 	call	0x19c	; 0x19c <main>
  e2:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>

Disassembly of section .text:

000001ee <__bad_interrupt>:
 1ee:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

000001d0 <wait>:

void createSignals();

void wait (int ms)
{
	for (int i = 0; i < ms; i++)
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	08 c0       	rjmp	.+16     	; 0x1e6 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	ef ec       	ldi	r30, 0xCF	; 207
 1d8:	f7 e0       	ldi	r31, 0x07	; 7
 1da:	31 97       	sbiw	r30, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <wait+0xa>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <wait+0x10>
 1e0:	00 00       	nop
 1e2:	2f 5f       	subi	r18, 0xFF	; 255
 1e4:	3f 4f       	sbci	r19, 0xFF	; 255
 1e6:	28 17       	cp	r18, r24
 1e8:	39 07       	cpc	r19, r25
 1ea:	ac f3       	brlt	.-22     	; 0x1d6 <wait+0x6>
	{
		_delay_ms(1);
	}
}
 1ec:	08 95       	ret

Disassembly of section .text.setCharliePlexingLed:

000000ea <setCharliePlexingLed>:
		
	}
}

void setCharliePlexingLed(int lednr) {
	switch(lednr) {
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	91 05       	cpc	r25, r1
  ee:	b9 f0       	breq	.+46     	; 0x11e <setCharliePlexingLed+0x34>
  f0:	2c f4       	brge	.+10     	; 0xfc <setCharliePlexingLed+0x12>
  f2:	00 97       	sbiw	r24, 0x00	; 0
  f4:	51 f0       	breq	.+20     	; 0x10a <setCharliePlexingLed+0x20>
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	69 f0       	breq	.+26     	; 0x114 <setCharliePlexingLed+0x2a>
  fa:	08 95       	ret
  fc:	84 30       	cpi	r24, 0x04	; 4
  fe:	91 05       	cpc	r25, r1
 100:	c1 f0       	breq	.+48     	; 0x132 <setCharliePlexingLed+0x48>
 102:	94 f0       	brlt	.+36     	; 0x128 <setCharliePlexingLed+0x3e>
 104:	05 97       	sbiw	r24, 0x05	; 5
 106:	d1 f0       	breq	.+52     	; 0x13c <setCharliePlexingLed+0x52>
 108:	08 95       	ret
		case 0:
		DDRA = 0b011;
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	8a bb       	out	0x1a, r24	; 26
		PORTA = 0b001;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	8b bb       	out	0x1b, r24	; 27
		break;
 112:	08 95       	ret
		case 1:
		DDRA = 0b011;
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	8a bb       	out	0x1a, r24	; 26
		PORTA = 0b010;
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	8b bb       	out	0x1b, r24	; 27
		break;
 11c:	08 95       	ret
		case 2:
		DDRA = 0b110;
 11e:	86 e0       	ldi	r24, 0x06	; 6
 120:	8a bb       	out	0x1a, r24	; 26
		PORTA = 0b010;
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	8b bb       	out	0x1b, r24	; 27
		break;
 126:	08 95       	ret
		case 3:
		DDRA = 0b110;
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	8a bb       	out	0x1a, r24	; 26
		PORTA = 0b100;
 12c:	84 e0       	ldi	r24, 0x04	; 4
 12e:	8b bb       	out	0x1b, r24	; 27
		break;
 130:	08 95       	ret
		case 4:
		DDRA = 0b101;
 132:	85 e0       	ldi	r24, 0x05	; 5
 134:	8a bb       	out	0x1a, r24	; 26
		PORTA = 0b100;
 136:	84 e0       	ldi	r24, 0x04	; 4
 138:	8b bb       	out	0x1b, r24	; 27
		break;
 13a:	08 95       	ret
		case 5:
		DDRA = 0b101;
 13c:	85 e0       	ldi	r24, 0x05	; 5
 13e:	8a bb       	out	0x1a, r24	; 26
		PORTA = 0b001;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	8b bb       	out	0x1b, r24	; 27
 144:	08 95       	ret

Disassembly of section .text.createSignals:

00000146 <createSignals>:
	signals[10].pin = 1;
	signals[10].delay = 50;
	signals[11].pin = 0;
	signals[11].delay = 50;*/
	
	for (int i = 0; i < 6; i++)
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0d c0       	rjmp	.+26     	; 0x166 <createSignals+0x20>
	{
		signals[i].pin = i;
 14c:	fc 01       	movw	r30, r24
 14e:	ee 0f       	add	r30, r30
 150:	ff 1f       	adc	r31, r31
 152:	e8 0f       	add	r30, r24
 154:	f9 1f       	adc	r31, r25
 156:	e0 50       	subi	r30, 0x00	; 0
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	80 83       	st	Z, r24
		signals[i].delay = 200;
 15c:	28 ec       	ldi	r18, 0xC8	; 200
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	32 83       	std	Z+2, r19	; 0x02
 162:	21 83       	std	Z+1, r18	; 0x01
	signals[10].pin = 1;
	signals[10].delay = 50;
	signals[11].pin = 0;
	signals[11].delay = 50;*/
	
	for (int i = 0; i < 6; i++)
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	86 30       	cpi	r24, 0x06	; 6
 168:	91 05       	cpc	r25, r1
 16a:	84 f3       	brlt	.-32     	; 0x14c <createSignals+0x6>
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	11 c0       	rjmp	.+34     	; 0x194 <createSignals+0x4e>
	{
		signals[i].pin = i;
		signals[i].delay = 200;
	}
	for (int i = 0; i < 6; i++) {
		signals[i + 5].pin = 5 - i;
 172:	fc 01       	movw	r30, r24
 174:	35 96       	adiw	r30, 0x05	; 5
 176:	9f 01       	movw	r18, r30
 178:	22 0f       	add	r18, r18
 17a:	33 1f       	adc	r19, r19
 17c:	e2 0f       	add	r30, r18
 17e:	f3 1f       	adc	r31, r19
 180:	e0 50       	subi	r30, 0x00	; 0
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	25 e0       	ldi	r18, 0x05	; 5
 186:	28 1b       	sub	r18, r24
 188:	20 83       	st	Z, r18
		signals[i + 5].delay = 200;
 18a:	28 ec       	ldi	r18, 0xC8	; 200
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	32 83       	std	Z+2, r19	; 0x02
 190:	21 83       	std	Z+1, r18	; 0x01
	for (int i = 0; i < 6; i++)
	{
		signals[i].pin = i;
		signals[i].delay = 200;
	}
	for (int i = 0; i < 6; i++) {
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	86 30       	cpi	r24, 0x06	; 6
 196:	91 05       	cpc	r25, r1
 198:	64 f3       	brlt	.-40     	; 0x172 <createSignals+0x2c>
		signals[i + 5].pin = 5 - i;
		signals[i + 5].delay = 200;
	}
 19a:	08 95       	ret

Disassembly of section .text.main:

0000019c <main>:
	}
}

int main(void)
{
	createSignals();
 19c:	0e 94 a3 00 	call	0x146	; 0x146 <createSignals>
	int arraySize = sizeof(signals)/sizeof(signals[0]);
	while (1)
	{
		for (int i = 0; i < arraySize; i++)
 1a0:	00 e0       	ldi	r16, 0x00	; 0
 1a2:	10 e0       	ldi	r17, 0x00	; 0
 1a4:	11 c0       	rjmp	.+34     	; 0x1c8 <main+0x2c>
		{
			setCharliePlexingLed(signals[i].pin);
 1a6:	e8 01       	movw	r28, r16
 1a8:	cc 0f       	add	r28, r28
 1aa:	dd 1f       	adc	r29, r29
 1ac:	c0 0f       	add	r28, r16
 1ae:	d1 1f       	adc	r29, r17
 1b0:	c0 50       	subi	r28, 0x00	; 0
 1b2:	df 4f       	sbci	r29, 0xFF	; 255
 1b4:	88 81       	ld	r24, Y
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 75 00 	call	0xea	; 0xea <__data_load_end>
			wait(signals[i].delay);
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	9a 81       	ldd	r25, Y+2	; 0x02
 1c0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <wait>
{
	createSignals();
	int arraySize = sizeof(signals)/sizeof(signals[0]);
	while (1)
	{
		for (int i = 0; i < arraySize; i++)
 1c4:	0f 5f       	subi	r16, 0xFF	; 255
 1c6:	1f 4f       	sbci	r17, 0xFF	; 255
 1c8:	0c 30       	cpi	r16, 0x0C	; 12
 1ca:	11 05       	cpc	r17, r1
 1cc:	64 f3       	brlt	.-40     	; 0x1a6 <main+0xa>
 1ce:	e8 cf       	rjmp	.-48     	; 0x1a0 <main+0x4>
