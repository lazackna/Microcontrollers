
OpdrachtB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ac  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  000001db  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b99  00000000  00000000  00000213  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000832  00000000  00000000  00000dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002f6  00000000  00000000  000015de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000084  00000000  00000000  000018d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000145  00000000  00000000  00001bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000154  00000154  000001a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.__vector_2 00000032  000000e0  000000e0  00000134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__vector_3 0000003c  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.wait    0000001e  00000136  00000136  0000018a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000024  00000112  00000112  00000166  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_2>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_etext>
  10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  48:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  4c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  64:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  68:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  6c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  70:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  74:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  78:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  7c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  80:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  84:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  88:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 89 00 	call	0x112	; 0x112 <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000154 <__bad_interrupt>:
 154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.__vector_2:

000000e0 <__vector_2>:
#include <xc.h>
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

ISR( INT1_vect ) {
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
	char val = PINC; // Read the current values of PORTC.
  ee:	83 b3       	in	r24, 0x13	; 19
	if(val == 0x1){	 // If value is 0x1 then reset the light to 0x80.
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	19 f4       	brne	.+6      	; 0xfa <__vector_2+0x1a>
		PORTC = 0x80;
  f4:	80 e8       	ldi	r24, 0x80	; 128
  f6:	85 bb       	out	0x15, r24	; 21
  f8:	05 c0       	rjmp	.+10     	; 0x104 <__vector_2+0x24>
		}else{
		PORTC = 0; // Set the port to 0.
  fa:	15 ba       	out	0x15, r1	; 21
		PORTC |= (val >> 1); // Bit shift the current value one to the right and or it with the current values of PORTC.
  fc:	95 b3       	in	r25, 0x15	; 21
  fe:	86 95       	lsr	r24
 100:	89 2b       	or	r24, r25
 102:	85 bb       	out	0x15, r24	; 21
	}
}
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

Disassembly of section .text.__vector_3:

000000a4 <__vector_3>:

ISR( INT2_vect ) {
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	2f 93       	push	r18
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	char val = PINC; // Read the current values of PORTC.
  b4:	93 b3       	in	r25, 0x13	; 19
	if(val == 0x80){ // If value is 0x80 then reset the light to 0x1.
  b6:	90 38       	cpi	r25, 0x80	; 128
  b8:	19 f4       	brne	.+6      	; 0xc0 <__vector_3+0x1c>
		PORTC = 0x1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	85 bb       	out	0x15, r24	; 21
  be:	08 c0       	rjmp	.+16     	; 0xd0 <__vector_3+0x2c>
	}else{
		PORTC = 0x0; // Set the port to 0.
  c0:	15 ba       	out	0x15, r1	; 21
		PORTC |= (val << 0x1); // Bit shift the current value one to the left and or it with the current values of PORTC.
  c2:	25 b3       	in	r18, 0x15	; 21
  c4:	89 2f       	mov	r24, r25
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	82 2b       	or	r24, r18
  ce:	85 bb       	out	0x15, r24	; 21
	}	
}
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	2f 91       	pop	r18
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

Disassembly of section .text.wait:

00000136 <wait>:

void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	08 c0       	rjmp	.+16     	; 0x14c <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	ef ec       	ldi	r30, 0xCF	; 207
 13e:	f7 e0       	ldi	r31, 0x07	; 7
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <wait+0xa>
 144:	00 c0       	rjmp	.+0      	; 0x146 <wait+0x10>
 146:	00 00       	nop
 148:	2f 5f       	subi	r18, 0xFF	; 255
 14a:	3f 4f       	sbci	r19, 0xFF	; 255
 14c:	28 17       	cp	r18, r24
 14e:	39 07       	cpc	r19, r25
 150:	ac f3       	brlt	.-22     	; 0x13c <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 152:	08 95       	ret

Disassembly of section .text.main:

00000112 <main>:

int main(void)
{
	DDRC = 0xFF; // Set all pins on DDRC to output.
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	84 bb       	out	0x14, r24	; 20
	
	EICRA |= 0b00111100; // Set PIN1 and PIN2 to rising edge.
 116:	ea e6       	ldi	r30, 0x6A	; 106
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	8c 63       	ori	r24, 0x3C	; 60
 11e:	80 83       	st	Z, r24
	EIMSK |= 0b0110; // Enable PIN1 and PIN2.
 120:	89 b7       	in	r24, 0x39	; 57
 122:	86 60       	ori	r24, 0x06	; 6
 124:	89 bf       	out	0x39, r24	; 57
	
	sei(); // Enable global interrupt system
 126:	78 94       	sei
	PORTC = 0b1; // Set pin 1 to high to have a starting bit.
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	85 bb       	out	0x15, r24	; 21
	
    while(1)
    {
        wait(500); // Wait here. The main does nothing.
 12c:	84 ef       	ldi	r24, 0xF4	; 244
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 9b 00 	call	0x136	; 0x136 <wait>
 134:	fb cf       	rjmp	.-10     	; 0x12c <main+0x1a>
