
OpdrachtB5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000001bc  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b03  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000873  00000000  00000000  00000dff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044c  00000000  00000000  00001672  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b8  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000226  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000224e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec eb       	ldi	r30, 0xBC	; 188
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	75 d0       	rcall	.+234    	; 0x19e <main>
  b4:	81 c0       	rjmp	.+258    	; 0x1b8 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_en>:
	PORTC = 0x02;
	lcd_en();
}

void lcd_en(void) {
	PORTC |= (1<<EN);	// E high
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	8f ec       	ldi	r24, 0xCF	; 207
  c0:	97 e0       	ldi	r25, 0x07	; 7
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_en+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_en+0x10>
  c8:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTC &= ~(1<<EN);  	// E low
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	87 7f       	andi	r24, 0xF7	; 247
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	8f ec       	ldi	r24, 0xCF	; 207
  d2:	97 e0       	ldi	r25, 0x07	; 7
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_en+0x1c>
  d8:	00 c0       	rjmp	.+0      	; 0xda <lcd_en+0x22>
  da:	00 00       	nop
  dc:	08 95       	ret

000000de <lcd_write_data>:
	for(;*str; str++){
		lcd_write_data(*str);
	}
}

void lcd_write_data(unsigned char byte) {
  de:	cf 93       	push	r28
  e0:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
  e2:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<RS);
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	84 60       	ori	r24, 0x04	; 4
  e8:	85 bb       	out	0x15, r24	; 21
	lcd_en();
  ea:	e6 df       	rcall	.-52     	; 0xb8 <lcd_en>

	// Second nibble
	PORTC = (byte<<4);
  ec:	c2 95       	swap	r28
  ee:	c0 7f       	andi	r28, 0xF0	; 240
  f0:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<RS);
  f2:	85 b3       	in	r24, 0x15	; 21
  f4:	84 60       	ori	r24, 0x04	; 4
	lcd_en();
  f6:	85 bb       	out	0x15, r24	; 21
  f8:	df df       	rcall	.-66     	; 0xb8 <lcd_en>
}
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <lcd_write_string>:
		lcd_command((0x80 + position));
	//}
	
}

void lcd_write_string(const char *str) {
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	ec 01       	movw	r28, r24

	for(;*str; str++){
 104:	02 c0       	rjmp	.+4      	; 0x10a <lcd_write_string+0xc>
		lcd_write_data(*str);
 106:	eb df       	rcall	.-42     	; 0xde <lcd_write_data>
	
}

void lcd_write_string(const char *str) {

	for(;*str; str++){
 108:	21 96       	adiw	r28, 0x01	; 1
 10a:	88 81       	ld	r24, Y
 10c:	81 11       	cpse	r24, r1
 10e:	fb cf       	rjmp	.-10     	; 0x106 <lcd_write_string+0x8>
		lcd_write_data(*str);
	}
}
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <init_4bits_mode>:
	PORTC = (byte<<4);
	PORTC |= (1<<RS);
	lcd_en();
}

void init_4bits_mode(void) {
 116:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 11c:	15 ba       	out	0x15, r1	; 21

	// Step 2 (table 12)
	PORTC = 0x20;	// Set lcd to 4-bit mode.
 11e:	c0 e2       	ldi	r28, 0x20	; 32
 120:	c5 bb       	out	0x15, r28	; 21
	lcd_en();
 122:	ca df       	rcall	.-108    	; 0xb8 <lcd_en>

	// Step 3 (table 12)
	PORTC = 0x20;  
	lcd_en();
 124:	c5 bb       	out	0x15, r28	; 21
 126:	c8 df       	rcall	.-112    	; 0xb8 <lcd_en>
	PORTC = 0x80; // Set to 2 lines.
 128:	80 e8       	ldi	r24, 0x80	; 128
	lcd_en();
 12a:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   
 12c:	c5 df       	rcall	.-118    	; 0xb8 <lcd_en>
	lcd_en();
 12e:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0; // Lcd, blink and cursor on.
 130:	c3 df       	rcall	.-122    	; 0xb8 <lcd_en>
	lcd_en();
 132:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;  
 134:	85 bb       	out	0x15, r24	; 21
	lcd_en();
 136:	c0 df       	rcall	.-128    	; 0xb8 <lcd_en>
 138:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x60; // Increase cursor position.
 13a:	be df       	rcall	.-132    	; 0xb8 <lcd_en>
 13c:	80 e6       	ldi	r24, 0x60	; 96
	lcd_en();
 13e:	85 bb       	out	0x15, r24	; 21
 140:	bb df       	rcall	.-138    	; 0xb8 <lcd_en>

}
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <reset>:

void reset(void){
	
	PORTC = 0x00;
 146:	15 ba       	out	0x15, r1	; 21
	lcd_en();
 148:	b7 df       	rcall	.-146    	; 0xb8 <lcd_en>
	PORTC = 0x01; 
 14a:	81 e0       	ldi	r24, 0x01	; 1
	lcd_en();
 14c:	85 bb       	out	0x15, r24	; 21
	
	PORTC = 0x00;
 14e:	b4 df       	rcall	.-152    	; 0xb8 <lcd_en>
	lcd_en();
 150:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x02;
 152:	b2 df       	rcall	.-156    	; 0xb8 <lcd_en>
 154:	82 e0       	ldi	r24, 0x02	; 2
	lcd_en();
 156:	85 bb       	out	0x15, r24	; 21
 158:	af cf       	rjmp	.-162    	; 0xb8 <lcd_en>
 15a:	08 95       	ret

0000015c <lcd_command>:
	PORTC &= ~(1<<EN);  	// E low
	_delay_ms(1);
}

void lcd_command ( unsigned char dat ){
	PORTC = dat & 0xF0;			// hoge nibble
 15c:	98 2f       	mov	r25, r24
 15e:	90 7f       	andi	r25, 0xF0	; 240
 160:	95 bb       	out	0x15, r25	; 21
	PORTC |= 0x08;				// data (RS=0),									// start (EN=1)
 162:	95 b3       	in	r25, 0x15	; 21
 164:	98 60       	ori	r25, 0x08	; 8
 166:	95 bb       	out	0x15, r25	; 21
 168:	ef ec       	ldi	r30, 0xCF	; 207
 16a:	f7 e0       	ldi	r31, 0x07	; 7
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_command+0x10>
 170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_command+0x16>
 172:	00 00       	nop
	_delay_ms(1);					// wait 1 ms
	PORTC = 0x04;					// stop (EN = 0)
 174:	94 e0       	ldi	r25, 0x04	; 4
 176:	95 bb       	out	0x15, r25	; 21
	
	PORTC = (dat & 0x0F) << 4;	// lage nibble
 178:	f0 e1       	ldi	r31, 0x10	; 16
 17a:	8f 9f       	mul	r24, r31
 17c:	c0 01       	movw	r24, r0
 17e:	11 24       	eor	r1, r1
 180:	85 bb       	out	0x15, r24	; 21
	PORTC |= 0x08;				// data (RS=0),									// start (EN=1)
 182:	85 b3       	in	r24, 0x15	; 21
 184:	88 60       	ori	r24, 0x08	; 8
 186:	85 bb       	out	0x15, r24	; 21
 188:	8f ec       	ldi	r24, 0xCF	; 207
 18a:	97 e0       	ldi	r25, 0x07	; 7
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_command+0x30>
 190:	00 c0       	rjmp	.+0      	; 0x192 <lcd_command+0x36>
 192:	00 00       	nop
	_delay_ms(1);					// wait 1 ms
	PORTC = 0x00;					// stop (EN=0 RS=0)
 194:	15 ba       	out	0x15, r1	; 21
 196:	08 95       	ret

00000198 <set_cursor>:
		//PORTC = 0x00;
		//lcd_en();
		//PORTC = 0x82; 
		//lcd_en();
		
		lcd_command((0x80 + position));
 198:	80 58       	subi	r24, 0x80	; 128
 19a:	e0 cf       	rjmp	.-64     	; 0x15c <lcd_command>
 19c:	08 95       	ret

0000019e <main>:
void reset(void);
void set_cursor(int position);

int main(void)
{
	DDRD = 0xFF;
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	81 bb       	out	0x11, r24	; 17
    init_4bits_mode();
 1a2:	b9 df       	rcall	.-142    	; 0x116 <init_4bits_mode>
	//char *str = "roof";
	reset();
 1a4:	d0 df       	rcall	.-96     	; 0x146 <reset>
 1a6:	84 e0       	ldi	r24, 0x04	; 4
	set_cursor(4);
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	f6 df       	rcall	.-20     	; 0x198 <set_cursor>
 1ac:	80 e0       	ldi	r24, 0x00	; 0
	lcd_write_string("David");
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	a6 df       	rcall	.-180    	; 0xfe <lcd_write_string>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
	

	
}
 1b6:	08 95       	ret

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
