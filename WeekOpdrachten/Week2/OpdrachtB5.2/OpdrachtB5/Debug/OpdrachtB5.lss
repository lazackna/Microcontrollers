
OpdrachtB5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016e  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  0000019d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000cd0  00000000  00000000  000001e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000848  00000000  00000000  00000eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003a9  00000000  00000000  000016fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00001aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000200  00000000  00000000  00001db5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00001fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000116  00000116  0000016a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_en  00000026  000000e2  000000e2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.init_4bits_mode 0000003e  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000000e  00000108  00000108  0000015c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 84 00 	call	0x108	; 0x108 <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_en:

000000e2 <lcd_en>:
	lcd_en();

}

void lcd_en(void) {
	PORTC |= (1<<EN);	// E high
  e2:	85 b3       	in	r24, 0x15	; 21
  e4:	88 60       	ori	r24, 0x08	; 8
  e6:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	8f ec       	ldi	r24, 0xCF	; 207
  ea:	97 e0       	ldi	r25, 0x07	; 7
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_en+0xa>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <lcd_en+0x10>
  f2:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTC &= ~(1<<EN);  	// E low
  f4:	85 b3       	in	r24, 0x15	; 21
  f6:	87 7f       	andi	r24, 0xF7	; 247
  f8:	85 bb       	out	0x15, r24	; 21
  fa:	8f ec       	ldi	r24, 0xCF	; 207
  fc:	97 e0       	ldi	r25, 0x07	; 7
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <lcd_en+0x1c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <lcd_en+0x22>
 104:	00 00       	nop
 106:	08 95       	ret

Disassembly of section .text.init_4bits_mode:

000000a4 <init_4bits_mode>:
	PORTC = (byte<<4);
	PORTC |= (1<<RS);
	lcd_en();
}

void init_4bits_mode(void) {
  a4:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  aa:	15 ba       	out	0x15, r1	; 21

	// Step 2 (table 12)
	PORTC = 0x20;	// Set lcd to 4-bit mode.
  ac:	c0 e2       	ldi	r28, 0x20	; 32
  ae:	c5 bb       	out	0x15, r28	; 21
	lcd_en();
  b0:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_en>

	// Step 3 (table 12)
	PORTC = 0x20;   // send first 4 bits.
  b4:	c5 bb       	out	0x15, r28	; 21
	lcd_en();
  b6:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_en>
	PORTC = 0x80; // Set to 2 lines.
  ba:	80 e8       	ldi	r24, 0x80	; 128
  bc:	85 bb       	out	0x15, r24	; 21
	lcd_en();
  be:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_en>

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
  c2:	15 ba       	out	0x15, r1	; 21
	lcd_en();
  c4:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_en>
	PORTC = 0xF0; // Lcd, blink and cursor on.
  c8:	80 ef       	ldi	r24, 0xF0	; 240
  ca:	85 bb       	out	0x15, r24	; 21
	lcd_en();
  cc:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_en>

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
  d0:	15 ba       	out	0x15, r1	; 21
	lcd_en();
  d2:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_en>
	PORTC = 0x60; // Increase cursor position.
  d6:	80 e6       	ldi	r24, 0x60	; 96
  d8:	85 bb       	out	0x15, r24	; 21
	lcd_en();
  da:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_en>

}
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

Disassembly of section .text.main:

00000108 <main>:
void lcd_write_string(char *str);
void lcd_write_data(unsigned char byte);

int main(void)
{
	DDRD = 0xFF;
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	81 bb       	out	0x11, r24	; 17
    init_4bits_mode();
 10c:	0e 94 52 00 	call	0xa4	; 0xa4 <__data_load_end>
	//lcd_write_string("our mom");
}
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	08 95       	ret
